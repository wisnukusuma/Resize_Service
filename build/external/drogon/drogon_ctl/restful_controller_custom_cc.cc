//this file is generated by program(drogon_ctl) automatically,don't modify it!
#include "restful_controller_custom_cc.h"
#include <drogon/utils/OStringStream.h>
#include <string>
#include <map>
#include <vector>
#include <set>
#include <iostream>
#include <unordered_map>
#include <unordered_set>
#include <algorithm>
#include <list>
#include <deque>
#include <queue>
using namespace drogon;
std::string restful_controller_custom_cc::genText(const DrTemplateData& restful_controller_custom_cc_view_data)
{
	drogon::OStringStream restful_controller_custom_cc_tmp_stream;
	std::string layoutName{""};
	restful_controller_custom_cc_tmp_stream << "/**\n";
	restful_controller_custom_cc_tmp_stream << " *\n";
	restful_controller_custom_cc_tmp_stream << " *  ";
{
    auto & val=restful_controller_custom_cc_view_data["fileName"];
    if(val.type()==typeid(const char *)){
        restful_controller_custom_cc_tmp_stream<<*any_cast<const char *>(&val);
    }else if(val.type()==typeid(std::string)||val.type()==typeid(const std::string)){
        restful_controller_custom_cc_tmp_stream<<*any_cast<const std::string>(&val);
    }
}
	restful_controller_custom_cc_tmp_stream << ".cc\n";
	restful_controller_custom_cc_tmp_stream << " *  This file is generated by drogon_ctl\n";
	restful_controller_custom_cc_tmp_stream << " *\n";
	restful_controller_custom_cc_tmp_stream << " */\n";
restful_controller_custom_cc_tmp_stream<<"\n";
	restful_controller_custom_cc_tmp_stream << "#include \"";
{
    auto & val=restful_controller_custom_cc_view_data["fileName"];
    if(val.type()==typeid(const char *)){
        restful_controller_custom_cc_tmp_stream<<*any_cast<const char *>(&val);
    }else if(val.type()==typeid(std::string)||val.type()==typeid(const std::string)){
        restful_controller_custom_cc_tmp_stream<<*any_cast<const std::string>(&val);
    }
}
	restful_controller_custom_cc_tmp_stream << ".h\"\n";
	restful_controller_custom_cc_tmp_stream << "#include <string>\n";
restful_controller_custom_cc_tmp_stream<<"\n";
auto tableInfo = restful_controller_custom_cc_view_data.get<DrTemplateData>("tableInfo");
auto modelName = tableInfo.get<std::string>("className");
bool hasPrimaryKey = (tableInfo.get<int>("hasPrimaryKey")==1);
auto namespaceVector=restful_controller_custom_cc_view_data.get<std::vector<std::string>>("namespaceVector");
std::string namespaceStr;
for(auto &name:namespaceVector)
{
    namespaceStr.append(name);
    namespaceStr.append("::");
}
if(!namespaceStr.empty())
{
    namespaceStr.resize(namespaceStr.length()-2);
    restful_controller_custom_cc_tmp_stream<<"using namespace "<<namespaceStr<<";\n";
}
std::string indentStr(restful_controller_custom_cc_view_data.get<std::string>("className").length(), ' ');
restful_controller_custom_cc_tmp_stream<<"\n";
if(hasPrimaryKey)
{
	restful_controller_custom_cc_tmp_stream << "void ";
{
    auto & val=restful_controller_custom_cc_view_data["className"];
    if(val.type()==typeid(const char *)){
        restful_controller_custom_cc_tmp_stream<<*any_cast<const char *>(&val);
    }else if(val.type()==typeid(std::string)||val.type()==typeid(const std::string)){
        restful_controller_custom_cc_tmp_stream<<*any_cast<const std::string>(&val);
    }
}
	restful_controller_custom_cc_tmp_stream << "::getOne(const HttpRequestPtr &req,\n";
	restful_controller_custom_cc_tmp_stream << "     ";
restful_controller_custom_cc_tmp_stream<<indentStr;
	restful_controller_custom_cc_tmp_stream << "         std::function<void(const HttpResponsePtr &)> &&callback,\n";
	restful_controller_custom_cc_tmp_stream << "     ";
restful_controller_custom_cc_tmp_stream<<indentStr;
	restful_controller_custom_cc_tmp_stream << "         ";
restful_controller_custom_cc_tmp_stream<<modelName;
	restful_controller_custom_cc_tmp_stream << "::PrimaryKeyType &&id)\n";
	restful_controller_custom_cc_tmp_stream << "{\n";
	restful_controller_custom_cc_tmp_stream << "    ";
{
    auto & val=restful_controller_custom_cc_view_data["className"];
    if(val.type()==typeid(const char *)){
        restful_controller_custom_cc_tmp_stream<<*any_cast<const char *>(&val);
    }else if(val.type()==typeid(std::string)||val.type()==typeid(const std::string)){
        restful_controller_custom_cc_tmp_stream<<*any_cast<const std::string>(&val);
    }
}
	restful_controller_custom_cc_tmp_stream << "Base::getOne(req, std::move(callback), std::move(id));\n";
	restful_controller_custom_cc_tmp_stream << "}\n";
restful_controller_custom_cc_tmp_stream<<"\n";
restful_controller_custom_cc_tmp_stream<<"\n";
	restful_controller_custom_cc_tmp_stream << "void ";
{
    auto & val=restful_controller_custom_cc_view_data["className"];
    if(val.type()==typeid(const char *)){
        restful_controller_custom_cc_tmp_stream<<*any_cast<const char *>(&val);
    }else if(val.type()==typeid(std::string)||val.type()==typeid(const std::string)){
        restful_controller_custom_cc_tmp_stream<<*any_cast<const std::string>(&val);
    }
}
	restful_controller_custom_cc_tmp_stream << "::updateOne(const HttpRequestPtr &req,\n";
	restful_controller_custom_cc_tmp_stream << "     ";
restful_controller_custom_cc_tmp_stream<<indentStr;
	restful_controller_custom_cc_tmp_stream << "            std::function<void(const HttpResponsePtr &)> &&callback,\n";
	restful_controller_custom_cc_tmp_stream << "     ";
restful_controller_custom_cc_tmp_stream<<indentStr;
	restful_controller_custom_cc_tmp_stream << "            ";
restful_controller_custom_cc_tmp_stream<<modelName;
	restful_controller_custom_cc_tmp_stream << "::PrimaryKeyType &&id)\n";
	restful_controller_custom_cc_tmp_stream << "{\n";
	restful_controller_custom_cc_tmp_stream << "    ";
{
    auto & val=restful_controller_custom_cc_view_data["className"];
    if(val.type()==typeid(const char *)){
        restful_controller_custom_cc_tmp_stream<<*any_cast<const char *>(&val);
    }else if(val.type()==typeid(std::string)||val.type()==typeid(const std::string)){
        restful_controller_custom_cc_tmp_stream<<*any_cast<const std::string>(&val);
    }
}
	restful_controller_custom_cc_tmp_stream << "Base::updateOne(req, std::move(callback), std::move(id));\n";
	restful_controller_custom_cc_tmp_stream << "}\n";
restful_controller_custom_cc_tmp_stream<<"\n";
restful_controller_custom_cc_tmp_stream<<"\n";
	restful_controller_custom_cc_tmp_stream << "void ";
{
    auto & val=restful_controller_custom_cc_view_data["className"];
    if(val.type()==typeid(const char *)){
        restful_controller_custom_cc_tmp_stream<<*any_cast<const char *>(&val);
    }else if(val.type()==typeid(std::string)||val.type()==typeid(const std::string)){
        restful_controller_custom_cc_tmp_stream<<*any_cast<const std::string>(&val);
    }
}
	restful_controller_custom_cc_tmp_stream << "::deleteOne(const HttpRequestPtr &req,\n";
	restful_controller_custom_cc_tmp_stream << "     ";
restful_controller_custom_cc_tmp_stream<<indentStr;
	restful_controller_custom_cc_tmp_stream << "            std::function<void(const HttpResponsePtr &)> &&callback,\n";
	restful_controller_custom_cc_tmp_stream << "     ";
restful_controller_custom_cc_tmp_stream<<indentStr;
	restful_controller_custom_cc_tmp_stream << "            ";
restful_controller_custom_cc_tmp_stream<<modelName;
	restful_controller_custom_cc_tmp_stream << "::PrimaryKeyType &&id)\n";
	restful_controller_custom_cc_tmp_stream << "{\n";
	restful_controller_custom_cc_tmp_stream << "    ";
{
    auto & val=restful_controller_custom_cc_view_data["className"];
    if(val.type()==typeid(const char *)){
        restful_controller_custom_cc_tmp_stream<<*any_cast<const char *>(&val);
    }else if(val.type()==typeid(std::string)||val.type()==typeid(const std::string)){
        restful_controller_custom_cc_tmp_stream<<*any_cast<const std::string>(&val);
    }
}
	restful_controller_custom_cc_tmp_stream << "Base::deleteOne(req, std::move(callback), std::move(id));\n";
	restful_controller_custom_cc_tmp_stream << "}\n";
}
restful_controller_custom_cc_tmp_stream<<"\n";
	restful_controller_custom_cc_tmp_stream << "void ";
{
    auto & val=restful_controller_custom_cc_view_data["className"];
    if(val.type()==typeid(const char *)){
        restful_controller_custom_cc_tmp_stream<<*any_cast<const char *>(&val);
    }else if(val.type()==typeid(std::string)||val.type()==typeid(const std::string)){
        restful_controller_custom_cc_tmp_stream<<*any_cast<const std::string>(&val);
    }
}
	restful_controller_custom_cc_tmp_stream << "::get(const HttpRequestPtr &req,\n";
	restful_controller_custom_cc_tmp_stream << "     ";
restful_controller_custom_cc_tmp_stream<<indentStr;
	restful_controller_custom_cc_tmp_stream << "      std::function<void(const HttpResponsePtr &)> &&callback)\n";
	restful_controller_custom_cc_tmp_stream << "{\n";
	restful_controller_custom_cc_tmp_stream << "    ";
{
    auto & val=restful_controller_custom_cc_view_data["className"];
    if(val.type()==typeid(const char *)){
        restful_controller_custom_cc_tmp_stream<<*any_cast<const char *>(&val);
    }else if(val.type()==typeid(std::string)||val.type()==typeid(const std::string)){
        restful_controller_custom_cc_tmp_stream<<*any_cast<const std::string>(&val);
    }
}
	restful_controller_custom_cc_tmp_stream << "Base::get(req, std::move(callback));\n";
	restful_controller_custom_cc_tmp_stream << "}\n";
restful_controller_custom_cc_tmp_stream<<"\n";
	restful_controller_custom_cc_tmp_stream << "void ";
{
    auto & val=restful_controller_custom_cc_view_data["className"];
    if(val.type()==typeid(const char *)){
        restful_controller_custom_cc_tmp_stream<<*any_cast<const char *>(&val);
    }else if(val.type()==typeid(std::string)||val.type()==typeid(const std::string)){
        restful_controller_custom_cc_tmp_stream<<*any_cast<const std::string>(&val);
    }
}
	restful_controller_custom_cc_tmp_stream << "::create(const HttpRequestPtr &req,\n";
	restful_controller_custom_cc_tmp_stream << "     ";
restful_controller_custom_cc_tmp_stream<<indentStr;
	restful_controller_custom_cc_tmp_stream << "         std::function<void(const HttpResponsePtr &)> &&callback)\n";
	restful_controller_custom_cc_tmp_stream << "{\n";
	restful_controller_custom_cc_tmp_stream << "    ";
{
    auto & val=restful_controller_custom_cc_view_data["className"];
    if(val.type()==typeid(const char *)){
        restful_controller_custom_cc_tmp_stream<<*any_cast<const char *>(&val);
    }else if(val.type()==typeid(std::string)||val.type()==typeid(const std::string)){
        restful_controller_custom_cc_tmp_stream<<*any_cast<const std::string>(&val);
    }
}
	restful_controller_custom_cc_tmp_stream << "Base::create(req, std::move(callback));\n";
	restful_controller_custom_cc_tmp_stream << "}\n";
if(layoutName.empty())
{
std::string ret{std::move(restful_controller_custom_cc_tmp_stream.str())};
return ret;
}else
{
auto templ = DrTemplateBase::newTemplate(layoutName);
if(!templ) return "";
HttpViewData data = restful_controller_custom_cc_view_data;
auto str = std::move(restful_controller_custom_cc_tmp_stream.str());
if(!str.empty() && str[str.length()-1] == '\n') str.resize(str.length()-1);
data[""] = std::move(str);
return templ->genText(data);
}
}
